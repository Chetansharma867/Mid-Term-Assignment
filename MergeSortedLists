public class MergeSortedLists {
    static class Node {
        int data;
        Node next;

        Node(int val) {
            this.data = val;
            this.next = null;
        }
    }

    // Function to merge two sorted lists
    public static Node mergeLists(Node l1, Node l2) {
        Node dummy = new Node(-1); // dummy node
        Node tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.data < l2.data) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        // Attach remaining list if any
        if (l1 != null) tail.next = l1;
        if (l2 != null) tail.next = l2;

        return dummy.next;
    }

    // Helper function to print list
    public static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println();
    }

    // Helper to create linked list from array
    public static Node createList(int[] arr) {
        Node head = new Node(arr[0]);
        Node current = head;
        for (int i = 1; i < arr.length; i++) {
            current.next = new Node(arr[i]);
            current = current.next;
        }
        return head;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5};
        int[] arr2 = {2, 4, 6};

        Node l1 = createList(arr1);
        Node l2 = createList(arr2);

        System.out.print("List 1: ");
        printList(l1);

        System.out.print("List 2: ");
        printList(l2);

        Node merged = mergeLists(l1, l2);

        System.out.print("Merged List: ");
        printList(merged);
    }
    
}

//Time and Space Complexity:

// Time	= O(n + m)
// Space = O(1)



// Algorithm:
// Create a dummy node to start the merged list.

// Use a pointer tail starting from dummy.

// While both lists are not null:

// Compare current nodes.

// Attach the smaller node to tail.next.

// Move that list's pointer forward.

// After loop, one list might still have nodes left â€” attach remaining list to tail.next.

// Return dummy.next (skipping dummy head).
