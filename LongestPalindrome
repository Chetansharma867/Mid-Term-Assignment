public class LongestPalindrome {
    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1; /
    }

    public static String longestPalindromicSubstring(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);     
            int len2 = expandAroundCenter(s, i, i + 1); 
            int len = Math.max(len1, len2);

            if (len > end - start) {
                // update start and end
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    public static void main(String[] args) {
        String s = "babad";
        String result = longestPalindromicSubstring(s);
        System.out.println("Longest Palindromic Substring: " + result);
    }
    
}

//Time and Space Complexity:
// time=O(n^2)
// space=O(1)

// Algorithm (Expand Around Center):
// A palindrome mirrors around its center.

// There are 2n - 1 centers (each character + between characters).

// Expand around each center and keep track of the longest.
