import java.util.ArrayList;
import java.util.List;

public class GenerateSubsets {
   public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums, 0);
        return result;
    }

    
    private static void backtrack(List<List<Integer>> result, List<Integer> currentSubset, int[] nums, int index) {
        
        result.add(new ArrayList<>(currentSubset));

        
        for (int i = index; i < nums.length; i++) {
           
            currentSubset.add(nums[i]);

            
            backtrack(result, currentSubset, nums, i + 1);

            
            currentSubset.remove(currentSubset.size() - 1);
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        List<List<Integer>> subsets = subsets(nums);
        
        System.out.println("All subsets:");
        for (List<Integer> subset : subsets) {
            System.out.println(subset);
        }
    } 
}

// Time and Space Complexity:


// Time	= O(2^N)
// Space =	O(2^N)
